python3 -m venv venv
(This command creates a virtual environment named venv using Python 3.)

source venv/bin/activate
(This command activates the virtual environment. Once activated, any Python packages installed will be isolated to this environment.)

deactivate
(This command deactivates the virtual environment, returning the shell to its normal state.)

python main.py --csv cdphe_open_data/target_citylist.csv --geojson cdphe_open_data/Colorado_City_Boundaries.geojson

### enter the shell on the running container
docker exec -it postgis /bin/bash

### connect to PostgreSQL using psql client
psql -h localhost -U postgres -d gis

### enable PostGIS
CREATE EXTENSION postgis;
SELECT postgis_version();

### docker-compose
docker-compose up --build

### build docker file and run it
docker build -t seed-image -f backend/Dockerfile.seed . && docker run -e POSTGRES_HOST=postgis -e POSTGRES_PORT=5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=gis seed-image

### run dev 
export FRONTEND_DOCKERFILE=frontend/Dockerfile.dev && export NODE_ENV=development && docker-compose up --build

### run prod with seed
export FRONTEND_DOCKERFILE=frontend/Dockerfile.prod && export NODE_ENV=production && export RUN_SEED=true && docker-compose up --build

### run prod 
export FRONTEND_DOCKERFILE=frontend/Dockerfile.prod && export NODE_ENV=production && docker-compose up --build

### ssh 
ssh -i walkernest-key-pair.pem ec2-user@18.188.247.251

### How to initialize docker on EC2 after log in with ssh
sudo yum update -y
sudo yum install docker -y
sudo service docker start
sudo systemctl enable docker
sudo usermod -aG docker ec2-user
sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
mkdir walkernest
chmod -R 755 /home/ec2-user/walkernest

### How to configure postgis on EC2
docker cp postgis-db:/etc/postgresql/16/main/postgresql.conf ./postgresql.conf
localhost'/listen_addresses = '*'
docker cp ./postgresql.conf postgis-db:/etc/postgresql/16/main/postgresql.conf

docker cp postgis-db:/etc/postgresql/16/main/pg_hba.conf ./pg_hba.conf
host    all             all             0.0.0.0/0               md5
host    all             all             ::/0                    md5
docker cp ./pg_hba.conf postgis-db:/etc/postgresql/16/main/pg_hba.conf

docker restart postgis-db

### run built docker images together using docker-compose.yml on ssh
docker-compose up -d

### login psql from EC2 on ssh
docker exec -it postgis-db bash
psql -U postgres -d gis -h 18.188.247.251 -W